{"version":3,"sources":["helpers/immutableize.js","reducers/users.js","reducers/index.js","constants/actionTypes.js","client/configureStore.js","serviceWorker.js","api/index.js","api/users.js","helpers/delay.js","actions/users.js","sagas/index.js","styles/vars.js","components/Users/styled.js","components/Users/Item/styled.js","components/Users/Item/index.js","components/Users/Item/Item.js","components/Users/Users.js","components/Users/index.js","client/index.js"],"names":["reducer","initialState","Immutable","fromJS","data","fetching","reducers","users","state","arguments","length","undefined","action","type","set","status","merge","toJS","combineReducers","Object","objectSpread","sagaMiddleware","createSagaMiddleware","Boolean","window","location","hostname","match","api","getUsers","axios","get","delay","ms","Promise","res","setTimeout","setUsersData","setUsersFetching","fetchUsers","watchLoadUsers","rootSaga","regenerator_default","a","wrap","_context","prev","next","call","sent","put","t0","console","error","stop","_marked","_context2","takeEvery","_marked2","_context3","all","_marked3","palette","spacing","n","GlobalStyle","createGlobalStyle","_templateObject","Body","styled","div","_templateObject2","UsersWrapper","_templateObject3","UsersContent","_templateObject4","EmptyList","_templateObject5","UserItem","styled_templateObject","Item","_ref","name","react_default","createElement","Users","dispatch","useEffect","react_epic_spinners_umd_min","size","color","isEmpty","react","map","user","Users_Item","assign","key","id","propsTypes","PropTypes","array","isRequired","bool","func","connect","store","createStore","rootReducer","applyMiddleware","runSaga","run","configureStore","__INITIAL_STATE__","ReactDOM","render","es","components_Users","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4807d82b.chunk.js","sourcesContent":["import { fromJS } from 'immutable';\r\n\r\nexport default (reducer) => (state, action) => {\r\n\tstate = reducer(fromJS(state), action);\r\n\t\r\n\treturn state.toJS === undefined\r\n\t\t? state\r\n\t\t: state.toJS();\r\n};\r\n","import Immutable from 'immutable';\r\nimport immutableize from \"@helpers/immutableize\";\r\n\r\nimport * as actionTypes from '@constants/actionTypes';\r\n\r\nconst initialState = Immutable.fromJS({\r\n\tdata: [],\r\n\tfetching: true,\r\n});\r\n\r\n\r\nconst users = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase actionTypes.USERS_SET_FETCHING_STATUS:\r\n\t\t\treturn state.set('fetching', action.status);\r\n\r\n\t\tcase actionTypes.USERS_SET_DATA:\r\n\t\t\treturn state.merge({\r\n\t\t\t\tfetching: false,\r\n\t\t\t\tdata: action.users,\r\n\t\t\t});\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default immutableize(users);\r\n","import { combineReducers } from 'redux';\r\n\r\nimport users from './users';\r\n\r\nexport const reducers = {\r\n\tusers,\r\n};\r\n\r\nexport default combineReducers({\r\n\t...reducers,\r\n});\r\n","export const USERS_SET_DATA = 'USERS_SET_DATA';\r\nexport const USERS_SET_FETCHING_STATUS = 'USERS_SET_FETCHING_STATUS';\r\n","import logger from 'redux-logger';\r\nimport rootReducer from '@reducers';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { createStore, applyMiddleware } from 'redux';\r\n\r\nconst isProductionBuild = process.env.NODE_ENV === 'production';\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n\r\nconst getMiddlewares = () => {\r\n  if (isProductionBuild) return applyMiddleware(\r\n\t  sagaMiddleware\r\n  );\r\n\r\n  return applyMiddleware(\r\n\t  sagaMiddleware,\r\n    logger,\r\n  );\r\n};\r\n\r\n\r\nexport default (initialState) => {\r\n\tconst store = createStore(rootReducer, initialState, getMiddlewares());\r\n\tstore.runSaga = sagaMiddleware.run;\r\n\t\r\n\treturn store;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import users from './users';\r\n\r\nexport default {\r\n\tusers\r\n};\r\n","import axios from 'axios';\r\n\r\nexport default {\r\n\t\r\n\tgetUsers: () => (\r\n\t\taxios.get('https://jsonplaceholder.typicode.com/users')\r\n\t),\r\n};\r\n","export default (ms) => new Promise(res => setTimeout(res, ms));\r\n","import * as actionTypes from '@constants/actionTypes';\r\n\r\nexport const setUsersData = (users) => ({\r\n\ttype: actionTypes.USERS_SET_DATA,\r\n\tusers,\r\n});\r\n\r\nexport const setUsersFetching = (status) => ({\r\n\ttype: actionTypes.USERS_SET_FETCHING_STATUS,\r\n\tstatus,\r\n});\r\n","import api from '@api';\r\nimport delay from '@helpers/delay';\r\nimport { call, put, takeEvery, all } from 'redux-saga/effects';\r\nimport { setUsersData, setUsersFetching } from \"@actions/users\";\r\n\r\nfunction* fetchUsers() {\r\n\tyield delay(2000);\r\n\t\r\n\ttry {\r\n\t\tconst users = yield call(api.users.getUsers);\r\n\t\tyield put(setUsersData(users.data));\r\n\t} catch (err) {\r\n\t\tyield put(setUsersFetching(true));\r\n\t\tconsole.error(err);\r\n\t}\r\n}\r\n\r\nfunction* watchLoadUsers() {\r\n\tyield takeEvery('USERS_FETCH', fetchUsers);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([\r\n\t\twatchLoadUsers()\r\n\t]);\r\n};\r\n","export const palette = {\r\n\tprimary: '#ff914d',\r\n};\r\n\r\nexport const spacing = (n) => [0, 4, 8, 16, 32, 64][n];\r\n\r\nexport const mobileSize = '500px';\r\n","import styled from \"styled-components\";\r\nimport { palette, spacing, mobileSize } from \"@styles/vars\";\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\tbody {\r\n\t\tbackground: ${palette.primary};\r\n\t\t\r\n\t\t@media (max-width: ${mobileSize}) {\r\n\t\t\tbackground: #fff;\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const Body = styled.div`\r\n\tpadding: 100px 0;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\t\r\n\t@media (max-width: ${mobileSize}) {\r\n\t\tpadding: 0;\r\n\t}\r\n`;\r\n\r\nexport const UsersWrapper = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tpadding: ${spacing(3)}px;\r\n\twidth: 500px;\r\n\tmin-height: 400px;\r\n\tborder-radius: 4px;\r\n\tbackground: #fff;\r\n\tbox-shadow: 1px 1px 8px 0 rgba(0, 0, 0, 0.2);\r\n\t\r\n\t@media (max-width: ${mobileSize}) {\r\n\t\tbox-shadow: none;\r\n\t\tborder-radius: 0;\r\n\t}\r\n`;\r\n\r\nexport const UsersContent = styled.div`\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\t\r\n\th1 {\r\n\t\tpadding: 0;\r\n\t\tmargin: 0 0 ${spacing(3)}px 0;\r\n\t\tcolor: ${palette.primary};\r\n\t}\r\n`;\r\n\r\nexport const EmptyList = styled.div`\r\n\tpadding: 25px 0;\r\n\topacity: .4;\r\n`;\r\n","import styled from \"styled-components\";\r\nimport { spacing } from \"@styles/vars\";\r\n\r\nexport const UserItem = styled.div`\r\n\tmargin-top: ${spacing(2)}px;\r\n\tpadding: ${spacing(2)}px;\r\n\tbackground: #f3f3f3;\r\n\tborder-radius: 4px;\r\n`;\r\n","import Item from './Item';\r\n\r\nexport default Item;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { UserItem } from \"./styled\";\r\n\r\nconst Item = ({ name }) => (\r\n\t<UserItem>\r\n\t\t{name || 'Не известно'}\r\n\t</UserItem>\r\n);\r\n\r\nItem.propTypes = {\r\n\tname: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Item;\r\n","import { isEmpty } from \"ramda\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { AtomSpinner } from 'react-epic-spinners'\r\nimport React, { useEffect, Fragment } from 'react';\r\n\r\nimport {\r\n\tBody,\r\n\tEmptyList,\r\n\tGlobalStyle,\r\n\tUsersContent,\r\n\tUsersWrapper,\r\n} from \"./styled\";\r\n\r\nimport Item from './Item';\r\n\r\n\r\nconst Users = ({ fetching, dispatch, data }) => {\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch({ type: 'USERS_FETCH' })\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<Body>\r\n\t\t\t<GlobalStyle />\r\n\t\t\t<UsersWrapper>\r\n\t\t\t\t{\r\n\t\t\t\t\tfetching ? (\r\n\t\t\t\t\t\t<AtomSpinner size={150} color=\"#ff914d\" />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<UsersContent>\r\n\t\t\t\t\t\t\t<h1>Contact Manager</h1>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tisEmpty(data) ? (\r\n\t\t\t\t\t\t\t\t\t<EmptyList>\r\n\t\t\t\t\t\t\t\t\t\tList is empty :(\r\n\t\t\t\t\t\t\t\t\t</EmptyList>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tdata.map((user) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Item key={user.id} {...user} />\r\n\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</UsersContent>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t</UsersWrapper>\r\n\t\t</Body>\r\n\t)\r\n};\r\n\r\nUsers.propsTypes ={\r\n\tdata: PropTypes.array.isRequired,\r\n\tfetching: PropTypes.bool.isRequired,\r\n\r\n\tdispatch: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\t...state.users,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Users);\r\n","import Users from './Users';\r\n\r\nexport default Users;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from './configureStore';\r\nimport * as serviceWorker from '../serviceWorker';\r\n\r\nimport rootSaga from \"@sagas\";\r\nimport Users from '@components/Users';\r\n\r\nimport '@styles/normalize.scss';\r\n\r\nconst store = configureStore(window.__INITIAL_STATE__ || {});\r\nstore.runSaga(rootSaga);\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<Users />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}