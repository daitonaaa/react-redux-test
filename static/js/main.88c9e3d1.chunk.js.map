{"version":3,"sources":["helpers/immutableize.js","reducers/users.js","reducers/index.js","constants/actionTypes.js","client/configureStore.js","serviceWorker.js","api/index.js","api/users.js","helpers/delay.js","actions/users.js","sagas/index.js","styles/vars.js","components/Users/styled.js","components/Users/Item/styled.js","components/Users/Item/index.js","components/Users/Item/Item.js","components/Users/Users.js","components/Users/index.js","client/index.js"],"names":["reducer","initialState","Immutable","fromJS","data","fetching","reducers","users","state","arguments","length","undefined","action","type","set","status","merge","toJS","combineReducers","Object","objectSpread","sagaMiddleware","createSagaMiddleware","Boolean","window","location","hostname","match","api","getUsers","axios","get","delay","ms","Promise","res","setTimeout","setUsersData","setUsersFetching","fetchUsers","watchLoadUsers","rootSaga","regenerator_default","a","wrap","_context","prev","next","put","call","sent","stop","_marked","_context2","takeEvery","_marked2","_context3","all","_marked3","palette","spacing","n","GlobalStyle","createGlobalStyle","_templateObject","Body","styled","div","_templateObject2","UsersWrapper","_templateObject3","UsersContent","_templateObject4","EmptyList","_templateObject5","UserItem","styled_templateObject","Item","_ref","name","react_default","createElement","Users","props","dispatch","useEffect","react_epic_spinners_umd_min","size","color","isEmpty","react","map","user","Users_Item","assign","key","id","propsTypes","PropTypes","array","isRequired","bool","func","connect","store","createStore","rootReducer","applyMiddleware","runSaga","run","configureStore","__INITIAL_STATE__","ReactDOM","render","es","components_Users","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88c9e3d1.chunk.js","sourcesContent":["import { fromJS } from 'immutable';\n\nexport default (reducer) => (state, action) => {\n\tstate = reducer(fromJS(state), action);\n\t\n\treturn state.toJS === undefined\n\t\t? state\n\t\t: state.toJS();\n};\n","import Immutable from 'immutable';\nimport immutableize from \"@helpers/immutableize\";\n\nimport * as actionTypes from '@constants/actionTypes';\n\nconst initialState = Immutable.fromJS({\n\tdata: [],\n\tfetching: false,\n});\n\n\nconst users = (state = initialState, action) => {\n\tswitch (action.type) {\n\n\t\tcase actionTypes.USERS_SET_FETCHING_STATUS:\n\t\t\treturn state.set('fetching', action.status);\n\n\t\tcase actionTypes.USERS_SET_DATA:\n\t\t\treturn state.merge({\n\t\t\t\tfetching: false,\n\t\t\t\tdata: action.users,\n\t\t\t});\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default immutableize(users);\n","import { combineReducers } from 'redux';\n\nimport users from './users';\n\nexport const reducers = {\n\tusers,\n};\n\nexport default combineReducers({\n\t...reducers,\n});\n","export const USERS_SET_DATA = 'USERS_SET_DATA';\nexport const USERS_SET_FETCHING_STATUS = 'USERS_SET_FETCHING_STATUS';\n","import logger from 'redux-logger';\nimport rootReducer from '@reducers';\nimport createSagaMiddleware from 'redux-saga'\nimport { createStore, applyMiddleware } from 'redux';\n\nconst isProductionBuild = process.env.NODE_ENV === 'production';\nconst sagaMiddleware = createSagaMiddleware();\n\n\nconst getMiddlewares = () => {\n  if (isProductionBuild) return applyMiddleware(\n\t  sagaMiddleware\n  );\n\n  return applyMiddleware(\n\t  sagaMiddleware,\n    logger,\n  );\n};\n\n\nexport default (initialState) => {\n\tconst store = createStore(rootReducer, initialState, getMiddlewares());\n\tstore.runSaga = sagaMiddleware.run;\n\t\n\treturn store;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import users from './users';\n\nexport default {\n\tusers\n};\n","import axios from 'axios';\n\nexport default {\n\t\n\tgetUsers: () => (\n\t\taxios.get('https://jsonplaceholder.typicode.com/users')\n\t),\n};\n","export default (ms) => new Promise(res => setTimeout(res, ms));\n","import * as actionTypes from '@constants/actionTypes';\n\nexport const setUsersData = (users) => ({\n\ttype: actionTypes.USERS_SET_DATA,\n\tusers,\n});\n\nexport const setUsersFetching = (status) => ({\n\ttype: actionTypes.USERS_SET_FETCHING_STATUS,\n\tstatus,\n});\n","import api from '@api';\nimport delay from '@helpers/delay';\nimport { call, put, takeEvery, all } from 'redux-saga/effects';\nimport { setUsersData, setUsersFetching } from \"@actions/users\";\n\nfunction* fetchUsers() {\n\tyield put(setUsersFetching(true));\n\tyield delay(2000);\n\t\n\tconst users = yield call(api.users.getUsers);\n\t\n\tyield put(setUsersData(users.data));\n}\n\nfunction* watchLoadUsers() {\n\tyield takeEvery('USERS_FETCH', fetchUsers);\n}\n\nexport default function* rootSaga() {\n\tyield all([\n\t\twatchLoadUsers()\n\t]);\n};\n","export const palette = {\n\tprimary: '#ff914d',\n};\n\nexport const spacing = (n) => [0, 4, 8, 16, 32, 64][n];\n\nexport const mobileSize = '500px';\n","import styled from \"styled-components\";\nimport { palette, spacing, mobileSize } from \"@styles/vars\";\nimport { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n\tbody {\n\t\tbackground: ${palette.primary};\n\t\t\n\t\t@media (max-width: ${mobileSize}) {\n\t\t\tbackground: #fff;\n\t\t}\n\t}\n`;\n\nexport const Body = styled.div`\n\tpadding: 100px 0;\n\tdisplay: flex;\n\tjustify-content: center;\n\t\n\t@media (max-width: ${mobileSize}) {\n\t\tpadding: 0;\n\t}\n`;\n\nexport const UsersWrapper = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tpadding: ${spacing(3)}px;\n\twidth: 500px;\n\tmin-height: 400px;\n\tborder-radius: 4px;\n\tbackground: #fff;\n\tbox-shadow: 1px 1px 8px 0 rgba(0, 0, 0, 0.2);\n\t\n\t@media (max-width: ${mobileSize}) {\n\t\tbox-shadow: none;\n\t\tborder-radius: 0;\n\t}\n`;\n\nexport const UsersContent = styled.div`\n\twidth: 100%;\n\theight: 100%;\n\t\n\th1 {\n\t\tpadding: 0;\n\t\tmargin: 0 0 ${spacing(3)}px 0;\n\t\tcolor: ${palette.primary};\n\t}\n`;\n\nexport const EmptyList = styled.div`\n\tpadding: 25px 0;\n\topacity: .4;\n`;\n","import styled from \"styled-components\";\nimport { spacing } from \"@styles/vars\";\n\nexport const UserItem = styled.div`\n\tmargin-top: ${spacing(2)}px;\n\tpadding: ${spacing(2)}px;\n\tbackground: #f3f3f3;\n\tborder-radius: 4px;\n`;\n","import Item from './Item';\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { UserItem } from \"./styled\";\n\nconst Item = ({ name }) => (\n\t<UserItem>\n\t\t{name || 'Не известно'}\n\t</UserItem>\n);\n\nItem.propTypes = {\n\tname: PropTypes.string.isRequired,\n};\n\nexport default Item;\n","import { isEmpty } from \"ramda\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { AtomSpinner } from 'react-epic-spinners'\nimport React, { useEffect, Fragment } from 'react';\n\nimport {\n\tBody,\n\tEmptyList,\n\tUsersContent,\n\tGlobalStyle,\n\tUsersWrapper,\n} from \"./styled\";\n\nimport Item from './Item';\n\n\nconst Users = (props) => {\n\tconst { fetching, dispatch, data } = props;\n\n\tuseEffect(() => {\n\t\tdispatch({ type: 'USERS_FETCH' })\n\t}, []);\n\n\treturn (\n\t\t<Body>\n\t\t\t<GlobalStyle />\n\t\t\t<UsersWrapper>\n\t\t\t\t{\n\t\t\t\t\tfetching ? (\n\t\t\t\t\t\t<AtomSpinner size={150} color=\"#ff914d\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<UsersContent>\n\t\t\t\t\t\t\t<h1>Contact Manager</h1>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tisEmpty(data) ? (\n\t\t\t\t\t\t\t\t\t<EmptyList>\n\t\t\t\t\t\t\t\t\t\tList is empty :(\n\t\t\t\t\t\t\t\t\t</EmptyList>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tdata.map((user) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<Item key={user.id} {...user} />\n\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</UsersContent>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</UsersWrapper>\n\t\t</Body>\n\t)\n};\n\nUsers.propsTypes ={\n\tdata: PropTypes.array.isRequired,\n\tfetching: PropTypes.bool.isRequired,\n\n\tdispatch: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n\t...state.users,\n});\n\nexport default connect(mapStateToProps)(Users);\n","import Users from './Users';\n\nexport default Users;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './configureStore';\nimport * as serviceWorker from '../serviceWorker';\n\nimport rootSaga from \"@sagas\";\nimport Users from '@components/Users';\n\nimport '@styles/normalize.scss';\n\nconst store = configureStore(window.__INITIAL_STATE__ || {});\nstore.runSaga(rootSaga);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<Users />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}